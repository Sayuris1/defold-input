--- Refer to cursor.md for documentation

local cursor = require "in.cursor"

go.property("action_id", hash("touch"))
go.property("drag", true)
go.property("drag_threshold", 20)
go.property("acquire_input_focus", false)
go.property("notify_own_gameobject", true)

local COLLISION_RESPONSE = hash("collision_response")
local INPUT = hash("input")

local action_pos = vmath.vector3()
local function handle_input(self, action_id, action)
	-- ignore accelerometer
	if not action_id and action.acc_x then
		return
	end
	action_pos.x = action.x
	action_pos.y = action.y
	self.action = action
	-- mouse movement
	if not action_id then
		go.set_position(action_pos)
		-- click or finger touching screen
	elseif action_id == self.action_id then
		if action.pressed then
			self.touch = true
			self.pressed = true
			self.skip_frame = true
		elseif action.released then
			self.touch = false
			self.released = true
			self.skip_frame = true
		end
		go.set_position(action_pos)
	end
end

local function is_mobile()
	local sys_info = sys.get_sys_info()
	if sys_info.system_name == "Android" or sys_info.system_name == "iPhone OS" then
		return true
	elseif sys_info.user_agent:find("Android") then
		return true
	elseif sys_info.user_agent:find("iPhone") or sys_info.user_agent:find("iPad") then
		return true
	end
	return false
end

function init(self)
	if self.acquire_input_focus then
		msg.post(".", "acquire_input_focus")
	end

	self.mobile = is_mobile()

	self.collision_id = nil
	self.collision_group = nil
	self.pressed = false
	self.released = false

	self.state = {
		pressed = false,
		dragging = false,
		over_id = nil,
	}
end

local function go_exists(id)
	local exists,_ = pcall(function()
		go.get_position(id)
	end)
	return exists
end

-- Cache the message table to limit the amount of short-lived objects created
local message = {}

local function notify_event(self, game_object_id, game_object_group, action, message_id)
	-- pcall to check if the game object exists since it might have been deleted
	-- typically a cursor_out message that is generated when the game object is deleted
	local exists = go_exists(game_object_id)
	if self.notify_own_gameobject then
		message.id = game_object_id
		message.group = game_object_group
		message.x = action.x
		message.y = action.y
		msg.post(".", message_id, message)
	end
	if game_object_id and exists then
		msg.post(game_object_id, message_id, message)
	end
end

function update(self, dt)
	-- skip one frame to give the collision data a chance to properly update
	-- after a press or release
	if self.skip_frame then
		self.skip_frame = false
		self.collision_id = nil
		self.collision_group = nil
		return
	end

	--
	-- RELEASE
	--
	if self.released then
		if self.state.pressed then
			-- release on a game object
			if self.state.dragging then
				self.state.dragging = false
				notify_event(self, self.state.pressed_id, self.state.pressed_group, self.action, cursor.DRAG_END)
			end
			notify_event(self, self.state.pressed_id, self.state.pressed_group, self.action, cursor.RELEASED)
			self.state.pressed = false
			self.state.pressed_id = nil
			self.state.pressed_group = nil
			-- release on mobile/touch screen should also trigger a cursor_out event
			if self.mobile and self.state.over_id then
				notify_event(self, self.state.over_id, self.state.over_group, self.action, cursor.OUT)
				self.state.over_id = nil
				self.state.over_group = nil
			end
		else
			-- release without game object
			notify_event(self, nil, nil, self.action, cursor.RELEASED)
		end
	end

	--
	-- OUT
	--
	if self.state.over_id and self.state.over_id ~= self.collision_id then
		notify_event(self, self.state.over_id, self.state.over_group, self.action, cursor.OUT)
		self.state.over_id = nil
		self.state.over_group = nil
	end

	--
	-- OVER
	--
	-- over event should happen on non-mobile/touch screen when cursor is above collision
	-- object or on mobile/touch screen while touching and moving finger over collision
	-- object
	if (not self.mobile or self.touch) and self.collision_id and self.state.over_id ~= self.collision_id then
		self.state.over_id = self.collision_id
		self.state.over_group = self.collision_group
		notify_event(self, self.state.over_id, self.state.over_group, self.action, cursor.OVER)
	end

	--
	-- PRESSED
	--
	if self.pressed then
		if not self.state.pressed and self.state.over_id then
			-- pressed on a game object
			self.state.pressed = true
			self.state.pressed_id = self.state.over_id
			self.state.pressed_group = self.state.over_group
			self.state.pressed_pos = go.get_position()
			self.state.pressed_offset = self.state.pressed_pos - go.get_position(self.state.over_id)
			notify_event(self, self.state.pressed_id, self.state.pressed_group, self.action, cursor.PRESSED)
		else
			-- pressed without a game object
			notify_event(self, nil, nil, self.action, cursor.PRESSED)
		end
	end

	--
	-- DRAG
	--
	local cursor_pos = go.get_position()
	if self.drag and self.state.pressed and not self.state.dragging then
		local distance = vmath.length(cursor_pos - self.state.pressed_pos)
		if distance >= self.drag_threshold then
			self.state.dragging = true
			notify_event(self, self.state.pressed_id, self.state.pressed_group, self.action, cursor.DRAG_START)
		end
	end

	if self.state.dragging then
		-- move the dragged object unless it has been deleted while being dragged
		if not go_exists(self.state.pressed_id) then
			self.state.dragging = false
			self.state.pressed = nil
			self.state.pressed_id = nil
			self.state.pressed_group = nil
			self.state.over_id = nil
			notify_event(self, self.state.pressed_id, self.state.pressed_group, self.action, cursor.DRAG_END)
			notify_event(self, self.state.pressed_id, self.state.pressed_group, self.action, cursor.RELEASED)
		else
			-- retain the offset between the cursor and the dragged object and use the z value from the dragged object
			cursor_pos.x = cursor_pos.x - self.state.pressed_offset.x
			cursor_pos.y = cursor_pos.y - self.state.pressed_offset.y
			cursor_pos.z = go.get_position(self.state.pressed_id).z
			go.set_position(cursor_pos, self.state.pressed_id)
		end
	end

	self.collision_id = nil
	self.collision_group = nil
	self.pressed = false
	self.released = false
end

function on_message(self, message_id, message, sender)
	if message_id == COLLISION_RESPONSE then
		if not self.collision_id or go.get_position(self.collision_id).z < message.other_position.z then
			self.collision_id = message.other_id
			self.collision_group = message.other_group
		end
	elseif message_id == INPUT then
		handle_input(self, message.action_id, message.action)
	end
end

function on_input(self, action_id, action)
	-- we should only care about calls to on_input if we have specifically acquired input focus
	-- if we haven't acquired input focus it is expected that input is sent via on_message from
	-- some other script
	if self.acquire_input_focus then
		handle_input(self, action_id, action)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
